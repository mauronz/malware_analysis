#!/usr/bin/python

import threading
import sys
import argparse
import sqlite3
import re
from ipwhois import IPWhois

#---------------------------------------------------------------------------------------------------

def get_key(item):
	return -item[1]

#---------------------------------------------------------------------------------------------------

def print_usage(argv0):
	print "Usage: "

#---------------------------------------------------------------------------------------------------

to_remove = []
count = 0
do_isp_lock = threading.Lock()

def do_isp_routine(rows, isp, total, tid):
	global to_remove, do_isp_lock, count

	local_to_remove = []
	for row in rows:
			ip = str(row[0])
			obj = IPWhois(ip)
			try:
				res = obj.lookup_whois(False)
				for net in res['nets']:
					if not net['name'] is None and net['name'].lower().find(isp) != -1:
						local_to_remove.append(ip)
			except:
				pass			

			do_isp_lock.acquire()
			count += 1
			print "%d: %d out of %d (%d%%)" % (tid, count, total, count*100/total)
			do_isp_lock.release()
			

	if len(local_to_remove) > 0 :
		do_isp_lock.acquire()
		to_remove.extend(local_to_remove)
		do_isp_lock.release()

#---------------------------------------------------------------------------------------------------



def do_isp(conn, isp_original, n_threads=10):

	global to_remove

	isp = isp_original.lower()
	expr = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")

	c = conn.cursor()

	to_remove = []

	c.execute("SELECT remote_host, count(*) FROM connections GROUP BY remote_host")
	tmp = c.fetchall()
	rows = []
	for row in tmp:
		ip = str(row[0])
		if row[1] > 1 and expr.match(ip):
			rows.append(row)

	rows = sorted(rows, key=get_key)

	threads = []
	if len(rows)/n_threads % 1 == 0:
		partition_size = int(len(rows)/n_threads)
	else:
		partition_size = int(len(rows)/(n_threads-1)) + 1

	for i in range(0, n_threads):
		tmp = rows[i * partition_size : min((i+1) * partition_size, len(rows))]
		t = threading.Thread(target=do_isp_routine, args=(tmp, isp, len(rows), i))
		threads.append(t)

	for t in threads:
		t.start()

	for t in threads:
		t.join()

	print "IPs found:"
	if len(to_remove) == 0:
		print "None!"
	else:
		print to_remove

		s = raw_input("Confirm deleting curresponding connections? (type 'yes') ")
		if s == "yes":
			print "Filtering db..."
			for ip in to_remove:
				c.execute("DELETE FROM connections WHERE remote_host=?", (ip,))
			conn.commit()
		else:
			print "No action taken"

#---------------------------------------------------------------------------------------------------

def do_lport(conn, lport):
	c = conn.cursor()
	s = raw_input("Confirm deleting curresponding connections? (type 'yes') ")
	if s == "yes":
		c.execute("DELETE FROM connections WHERE local_port=?", (lport,))
		conn.commit()

#---------------------------------------------------------------------------------------------------

if __name__ == "__main__" :
	parser = argparse.ArgumentParser(sys.argv[0])
	parser.add_argument("db_file", action="store")
	parser.add_argument("--lport", action="store", type=int)
	parser.add_argument("--isp", action="store")

	args = parser.parse_args(sys.argv[1:])

	conn = sqlite3.connect(args.db_file)

	do_something = False
	if not args.isp is None:
		do_isp(conn, args.isp)
		do_something = True

	if not args.lport is None:
		do_lport(conn, args.lport)
		do_something = True

	if not do_something:
		parser.print_help()

	
	conn.close()
