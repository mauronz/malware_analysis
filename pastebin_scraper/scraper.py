import re
import mechanize
import hashlib
import os.path
import requests
import time
import sqlite3
import yaml
import binascii

req_count = 0

def vt_send_file(filename):
	global req_count
	if req_count == 4:
		req_count = 0
		time.sleep(65)
	params = {'apikey': VT_KEY}
	files = {'file': ("from_pastebin", open("binaries/" + filename, 'rb'))}
	response = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', files=files, params=params)
	json_response = response.json()

	req_count += 1

	return json_response["scan_id"]


def vt_request_report(code):
	global req_count
	if req_count == 4:
		req_count = 0
		time.sleep(65)
	params = {'apikey':  VT_KEY, 'resource': code}
	headers = { "Accept-Encoding": "gzip, deflate", "User-Agent" : "gzip,  My Python requests library example client or username" }
	response = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params, headers=headers)	
	json_response = response.json()
	
	req_count += 1

	return json_response


def analyze_page(br, conn):	
	reg = re.compile("^/archive/a/.+$")
	c = conn.cursor()
	for link in br.links(url_regex=reg):
		url_id = link.url[11:]
		c.execute("SELECT COUNT(*) FROM Dumps WHERE id=?", (url_id,))
		res = int(c.fetchone()[0])
		if res == 0:
			resp = br.follow_link(link)
			data = resp.get_data()
			f = open("cur_bas64.txt", "w")
			f.write(data)
			f.close()
			try:
				binary = data.decode("base64")
			except binascii.Error:
				print "Error decoding link %s" % (link.url)
				br.back()
				continue			

			hsh = hashlib.sha256(binary).hexdigest()
			if not os.path.exists("binaries/" + hsh) :
				print "New file: %s" % hsh
				f = open("binaries/" + hsh, "w")
				f.write(binary)
				f.close()

				while True:
					json = vt_request_report(hsh)
					if json["response_code"] == 0:
						vt_send_file(hsh)
					elif json["response_code"] == 1:
						print "\tDetection: %d/%d" % (json["positives"], json["total"])
						name1 = ""
						name2 = ""
						if NAMING_AV1 in json["scans"]:
							name1 = json["scans"][NAMING_AV1]["result"]
							print "\tName: %s (%s)" % (name1, NAMING_AV1)
						if NAMING_AV2 in json["scans"]:
							name2 = json["scans"][NAMING_AV2]["result"]
							print "\tName: %s (%s)" % (name2, NAMING_AV2)

						c.execute("INSERT INTO Binaries(sha256, positives, total, name1, name2, scan_url) VALUES (?, ?, ?, ?, ?, ?)", (hsh, json["positives"], json["total"], name1, name2, json["permalink"]))
						break
					elif json["response_code"] != -2:
						print "Unknow response code from VT: %d" % json["response_code"]
						break

					print "Report in queue"
					time.sleep(30)			
		
	
			else:
				print "Already seen: %s" % hsh
	
			c.execute("INSERT INTO Dumps(id, sha256) VALUES(?, ?)", (url_id, hsh))
			conn.commit()

			br.back()


if __name__ == "__main__":

	ymlfile = open("config.yml", 'r')
	cfg = yaml.load(ymlfile)
	MONITOR_USER = cfg["scraper"]["monitor_user"]
	MONITOR_PWD = cfg["scraper"]["monitor_pwd"]	
	VT_KEY = cfg["scraper"]["vt_key"]
	NAMING_AV1 = cfg["scraper"]["naming_av1"]
	NAMING_AV2 = cfg["scraper"]["naming_av2"]

	conn = sqlite3.connect("database.sqlite")

	br = mechanize.Browser()
	br.open("https://www.pastemonitor.com/account/login")
	form = br.forms()[0]
	br.form = form
	form["username"] = MONITOR_USER
	form["password"] = MONITOR_PWD
	resp = br.submit()
	if resp.geturl() == "https://www.pastemonitor.com/account/login":
		print "Error: Wrong credentials for pastemonitor"
		exit()

	cur_page = 1
	while True:
		analyze_page(br, conn)
		try:
			link = br.find_link(url="/portal/i?p=%d" % (cur_page+1))
			br.follow_link(link)
			cur_page += 1
		except mechanize.LinkNotFoundError:
			break
	
	
